name: Retrieve Secrets from Vault

on: push

permissions:
    id-token: write
    contents: read 

jobs:
  retrieve-secrets:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
        # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    
    - name: Retrieve Secret
      id: secretdata
      uses: hashicorp/vault-action@v2.4.0
      with:
        method: jwt
        url: "https://${{ secrets.VAULT_ADDR }}"
        role: "github-actions"
        secrets: |
            ${{ secrets.VAULT_SECRET_PATH }} ${{ secrets.VAULT_SECRET_KEY }} | client_id;
            ${{ secrets.VAULT_SECRET_PATH }} ${{ secrets.CONTAINER_NAME }} | container_name;
            ${{ secrets.VAULT_SECRET_PATH }} ${{ secrets.RESOURCE_GROUP_NAME }} | resource_group_name;
            ${{ secrets.VAULT_SECRET_PATH }} ${{ secrets.STORAGE_ACCOUNT }} | storage_account;
            ${{ secrets.VAULT_SECRET_PATH }} ${{ secrets.SUBSCRIPTION_ID }} | subscription_id;
            ${{ secrets.VAULT_SECRET_PATH }} ${{ secrets.TENANT_ID }} | tenant_id

    
    - name: Print Secret Data
      run: |
        echo '${{ steps.secretdata.outputs.client_id }}'
        echo '${{ steps.secretdata.outputs.container_name }}'
        echo '${{ steps.secretdata.outputs.storage_account }}'
        echo '${{ steps.secretdata.outputs.subscription_id }}'
        echo '${{ steps.secretdata.outputs.tenant_id }}'
        
    - name: Fetch Secrets from Vault
      env:
        VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      run: |
          export CLIENT_ID=${{ steps.secretdata.outputs.client_id }}
          export TENANT_ID=${{ steps.secretdata.outputs.tenant_id }}
          export SUBSCRIPTION_ID=${{ steps.secretdata.outputs.subscription_id }}
          export RESOURCE_GROUP_NAME=${{ steps.secretdata.outputs.resource_group_name }}
          export STORAGE_ACCOUNT=${{ steps.secretdata.outputs.storage_account }}
          export CONTAINER_NAME=${{ steps.secretdata.outputs.container_name }}  
      # Log into Azure with OIDC integration
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
          client-id: ${{ steps.secretdata.outputs.client_id }}
          tenant-id: ${{ steps.secretdata.outputs.tenant_id }}
          subscription-id: ${{ steps.secretdata.outputs.subscription_id }}
          
  
      # Run az commands to confirm sub access
    - name: 'Run az commands'
      run: |
         az account show
  
      # Run Terraform init
    - name: Terraform Init
      id: init
      env:
          STORAGE_ACCOUNT: ${{ steps.secretdata.outputs.storage_account }}
          CONTAINER_NAME: ${{ steps.secretdata.outputs.container_name }} 
          RESOURCE_GROUP_NAME: ${{ steps.secretdata.outputs.resource_group_name }}
          ARM_CLIENT_ID: ${{ steps.secretdata.outputs.client_id }}
          ARM_SUBSCRIPTION_ID: ${{ steps.secretdata.outputs.subscription_id }}
          ARM_TENANT_ID: ${{ steps.secretdata.outputs.tenant_id }}
          ARM_USE_OIDC: "true"
          ARM_OIDC_TOKEN: ${{ secrets.AZURE_OIDC_TOKEN }}
      run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"
      # Run a Terraform fmt
    - name: Terraform format
      id: fmt
      run: terraform fmt -check
  
      # Run a Terraform validate
    - name: Terraform validate
      id: validate
      if: success() || failure()
      env:
          ARM_CLIENT_ID: ${{ steps.secretdata.outputs.client_id }}
          ARM_SUBSCRIPTION_ID: ${{ steps.secretdata.outputs.subscription_id }}
          ARM_TENANT_ID: ${{ steps.secretdata.outputs.tenant_id }}
      run: terraform validate -no-color
  
      # Run a Terraform plan
    - name: Terraform plan
      id: plan
      env:
          ARM_CLIENT_ID: ${{ steps.secretdata.outputs.client_id }}
          ARM_SUBSCRIPTION_ID: ${{ steps.secretdata.outputs.subscription_id }}
          ARM_TENANT_ID: ${{ steps.secretdata.outputs.tenant_id }}
      run: terraform plan -no-color
  
      # Add a comment to pull requests with plan results
    - name: Add Plan Comment
      id: comment
      uses: actions/github-script@v6
      env:
         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })